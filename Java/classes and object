/*
    Learning about how the way that the running flow of each method should executed inside the stack memory segment
*/

Example program for method returnning;

Finding nth fibonnoci number:

public class First{
    public int finder(int n){
    if(n <= 0 ) return n;

    return finder(n-1)+finder(n-2);
}    
    public static void main(String args[]){
    }
}

//  Learning about dp approaches :

House robber

class Main{
    public int finder(int a[],int size){
if(size == 0 ) return a[size];
if(size < 0 ) return 0;

int getting = a[size]+finder(a,size-2);
int notGetting = 0+finder(a,size-1);

return Math.max(getting,notGetting);
}
    public static void main(String args[]){
    int house[]= {1,2,3,4,5};
    finder(a,house.length-1);
}
}


//Getting into the OOPS concepts
    
class Car{
    private String doors;
    private String driver;
    private String engine;
    private int speed;

    public String getDoors() {
        return doors;
    }

    public void setDoors(String doors) {
        this.doors = doors;
    }

    public String getDriver() {
        return driver;
    }

    public void setDriver(String driver) {
        this.driver = driver;
    }

    public String getEngine() {
        return engine;
    }

    public void setEngine(String engine) {
        this.engine = engine;
    }

    public int getSpeed() {
        return speed;
    }

    public void setSpeed(int speed) {
        this.speed = speed;
    }



}

class Main{
    public static void main(String args[]){
        Car car = new Car();
        car.setDoors("closed");
        car.setDriver("seated");
        car.setEngine("off");
        car.setSpeed(10);

        System.out.println(car.getSpeed());
        System.out.println(car.getDriver());
    }
}

//using constructor
class SmartPhone{
    private String brand ;
    public SmartPhone(){
        brand = "apple";
    }

    public String getBrand(){
        return brand;
    }
}

class Main{
    public static void main(String args[]){
        SmartPhone phone = new SmartPhone();
        System.out.print(phone.getBrand());
    }
}


//car based example of inheritance

class Vehicle{
    private String engine;
    private int wheels;
    private int seats;
    private int fuelTank;
    private  String lights;

    public Vehicle(){
        engine = "petrol";
        wheels = 2;
        seats = 2;
        fuelTank = 14;
        lights = "LED";

    }

    public Vehicle(String engine, int wheels, int seats, int fuelTank, String lights) {
        this.engine = engine;
        this.wheels = wheels;
        this.seats = seats;
        this.fuelTank = fuelTank;
        this.lights = lights;
    }

    public String getEngine() {
        return engine;
    }

    public void setEngine(String engine) {
        this.engine = engine;
    }

    public int getWheels() {
        return wheels;
    }

    public void setWheels(int wheels) {
        this.wheels = wheels;
    }

    public int getSeats() {
        return seats;
    }

    public void setSeats(int seats) {
        this.seats = seats;
    }

    public int getFuelTank() {
        return fuelTank;
    }

    public void setFuelTank(int fuelTank) {
        this.fuelTank = fuelTank;
    }

    public String getLights() {
        return lights;
    }

    public void setLights(String lights) {
        this.lights = lights;
    }
}

class Truck{
    public String steering;
    public String musicSystem;
    public String airConditioner;
    public int container;
}

class Car{
    public String steering;
    public String musicSystem;
    public String airConditioner;
    public String fridge;
    public String entertainmentSystem;

}

class Bike extends Vehicle{
    public String handle;

    public Bike(){
        handle = "hi";
    }

    public Bike(String handle) {
        this.handle = handle;
    }

    public Bike(String engine, int wheels, int seats, int fuelTank, String lights, String handle) {
        super(engine, wheels, seats, fuelTank, lights);
        this.handle = handle;
    }
}

class Main{
    public static void main(String args[]){
        Bike bike = new Bike();
        bike.handle = "Short";


        System.out.println(bike.getWheels());
    }
}


class Animal{
    protected float heightInFeet;
    protected float weightInKilos;
    protected String animalType;
    protected String bloodType;

    public Animal(){
        this.heightInFeet = 0;
        this.weightInKilos = 0;
        this.animalType = "unknown";
        this.bloodType = "unknown";
    }

    public String showInfo(){
        return "Animal [heightInFeet = "+this.heightInFeet+" , weightInKilos="+weightInKilos+" , animalType = "+animalType+" , bloodType ="+bloodType+"]";
    }
}

class Reptile extends Animal{
    protected String skin,egg;
    protected boolean backbone;

    public Reptile(){
        heightInFeet= 5;
        weightInKilos = 20;
        animalType = "Reptile";
        bloodType = "Cold";
        this.skin = "Dry skin";
        this.backbone = true;
        this.egg = "soft shelled";
    }

    public String showInfo(){
        return "Reptile [skin= "+skin+" , egg="+egg+" , backbone= "+backbone+" ,heightInFeet = "+heightInFeet+" weightInkilos= "+weightInKilos+" , animalType= "+animalType+" ,bloodType= "+bloodType;
    }
}

class Crocodile extends Reptile{
    public Crocodile(){
        super();
        super.egg = "hard shelled";
    }

    public String showInfo(){
        return " Crocodile [ skin = "+skin+" , egg= "+egg+", backbone = "+backbone+" , heightInFeet ="+heightInFeet+" , weightInKilos= "+weightInKilos+" , animalType= "+animalType+" , bloodType= "+bloodType;
    }
}

class Fish extends Animal{
    protected boolean waterBone = true;
    protected boolean gills = true;

    public Fish(){
        animalType = "fish";
        this.waterBone=true;
        this.gills = true;

    }

    public String showInfo(){
        return "Fish [waterBone = "+waterBone+" , gills= "+gills;
    }
}
class Shop{
    Lock lock = new Lock();
    
    
    public void shopStatus(){
        if(lock.isLocking()){
            System.out.printf("shop is locked");
        }else{
            System.out.printf("Shop is open");
        }
    }
    
    
    class Lock{
        private boolean locking = true;
        
        public boolean isLocking() {
            return locking;
        }
        
        public void setLocking(boolean locking){
            this.locking = locking;
        }
    }
}


class Main{
    public static void main(String args[]){
        Shop shop = new Shop();
        shop.shopStatus();
    }
}

//static and non static inner classes

class ToyotaCars {
    public static class Brand {
        public static String brandName = "Toyota";

        public static void tagLine() {
            System.out.println("Reliable cars");
        }
    }

    public class NonStaticInner {
        public void model(String model) {
            System.out.println("Make of the car: " + model);
        }
    }

    NonStaticInner nonObj = new NonStaticInner();

    public NonStaticInner getObj() {
        return nonObj;
    }
}

class Main {
    public static void main(String args[]) {
        ToyotaCars obj = new ToyotaCars();
        ToyotaCars.NonStaticInner obj1 = obj.getObj(); // Corrected object reference

        obj1.model("aadi"); // Corrected variable name
    }
}

Getting into the Generics

/*
    T - Type
    E - element
    K - Key
    N - Number
    V - value
*/


// class Data{
//     private Object object;
    
//     public Data(Object object){
//         this.object = object;
//     }
    
//     public String toString(){
//         return (String) object;
//     }
    
//     public Object getObject(){
//         return object;
//     }
// }

// class GenericData<T>{
//     private T data;
    
//     public GenericData(T data){
//         this.data = data;
//     }
    
//     public T getData(){
//         return data;
//     }
// }

// import java.util.*;
// class Data <K,V extends Name>{
//     private K key;
//     private V value;
    
    
//     public Data(K key,V value){
//         this.key = key;
//         this.value = value;
//     }
    
//     public K getKey(){
//         return key;
//     }
//     public V getValue(){
//         return value;
//     }
    
//     public String toString(){
//         return " Data { key ="+key+" value="+value+"}";
//     }
    
//     public <E extends Number,N> void display(E element,N number){
//         System.out.println("Element: "+element+" Number: "+number);
//     }
// }

// class Name{
//     private String name;
    
//     public Name(String name){
//         this.name = name;
//     }
    
//     public String toString(){
//         return this.name;
//     }
// }

// class Second{
//     public <E> void printListData(List<E> list){
//         for(E element: list){
//             System.out.println(element);
//         }
//     }
// }
// class Main{
//     public static void main(String args[]){
//         // List<Data> elements = new LinkedList();
//         // elements.add(new Data("chaand"));
//         // elements.add(new Data('E')); 
        
//         // for(Data e: elements){
//         //     System.out.print(e);
//         // }
        
//         // GenericData<String> genericData = new GenericData<String>("some data");
//         // String s = genericData.getData();
        
//         // System.out.print(s);
        
//         // Data<Integer,String> data = new Data(10,"chaand");
//         // System.out.println("Key: "+data.getKey()+" value= "+data.getValue());
//         // data.display(20,40);
        
//         List<Integer> list1 = new ArrayList(Arrays.asList(12,14,15));
    
//         new Second().printListData(list1);
//     }
// }

// import java.util.*;

// class Vehicle{
//     private int Id;
//     public Vehicle(int id){
//         this.Id = id;
//     }
    
//     public String toString(){
//         return "Vehicle [ id : "+this.Id+" ]";
//     }
// }

// class Car extends Vehicle{
//     private String modelName;
//     public Car(int id,String modelName){
//         super(id);
//         this.modelName = modelName;
//     }
//     public String toString(){
//         return "car[ id: "+super.toString()+" name: "+modelName+" ]";
//     }
// }

// class Main{
//     public static void main(String args[]){
//         List<Vehicle> list = new ArrayList();
//         list.add(new Car(1,"oooo"));
//         list.add(new Vehicle(2));
        
//         System.out.print(list);
//     }
// }


//Getting into the collections

import java.util.*;    
class Main{
    public static void main(String args[]){
        List<String> list = new ArrayList(Arrays.asList("shankar","siva"));
        
        System.out.print(list.get(0));
    }
}

import java.util.*;

// class IntWrapper{
//     public int num;
    
//     public int getNum(){
//         return num;
//     }
    
//     public void setNum(int num){
//         this.num = num;
//     }
    
//     public IntWrapper(int num){
//         this.num = num;
//     }
// }
// //auto boxing autounboxing
// class Main{
//     public static void main(String args[]){
//         ArrayList<IntWrapper> numberlist = new ArrayList();
        
//         numberlist.add(new IntWrapper(2));
        
//         System.out.println(numberlist.get(0).num);
//     }
// }

// class Main{
//     public static void main(String args[]){
//         Stack<Integer> numbers = new Stack();
//         numbers.push(25);
//         numbers.push(5);
        
//         Iterator<Integer> it = numbers.listIterator();
//         while(it.hasNext()) {
//             System.out.println(it.next());
//         }
//     }
// }

// class Name implements Comparable<Name>{
//     private String name;
    
//     public Name(String name){
//         this.name = name;
//     }
    
//     public String toString(){
//         return this.name;
//     }
    
//     public int compareTo(Name obj){
//         if(name.length() == obj.name.length()){
//             return 0;
//         }else if(name.length() > obj.name.length()){
//             return 1;
//         }
//         else{
//             return -1;
//         }
//     }
// }


// public class Main{
//     public static void main(String args[]){
//         List names = new LinkedList<>(Arrays.asList(new Name("cha"),new Name("ed"),new Name("John")));
        
//         names.sort(null);
//         System.out.println(names);
//     }
// }


class Data<K extends Integer,V extends String>{
    private K key;
    private V value;
    
    public Data(K key,V value){
        this.key = key;
        this.value = value;
    }
    
    public String toString(){
        return " Data { key"+key+" value= "+value;
    }
    
    public K getKey(){
        return this.key;
    }
    
    public V getValue(){
        return this.value;
    }
    
}

class Main{
    public static void main(String args[]){
        Set<Data<Integer,String>> set = new TreeSet(new Comparator<Data<Integer,String>>(){
          public int compare(Data<Integer,String> obj1,Data<Integer,String> obj2) {
              return obj1.getKey() - obj2.getKey();
          } 
        });
        set.add(new Data<>(1,"chaand"));
        set.add(new Data<>(2,"shankar"));
        set.add(new Data<>(3,"zebra"));
        
        
        for(Data data: set){
            System.out.print(data);
        }
    }
}



// //
import java.util.*;






// class MyCounter extends Thread{
//     private int threadNo;
    
//     public MyCounter(int threadNo){
//         this.threadNo = threadNo;
//     }
    
//     public void run(){
//         try{
//         countMe();
//         }
//         catch(Exception e){
//             System.out.println(e.getMessage());
//         }
//     }
//     public void countMe() throws InterruptedException{
//         for(int i = 0 ; i < 10 ;i++){
//             Thread.sleep(500);
//             System.out.println("Thread no: "+this.threadNo +" and iteration no: "+i);
//         }
//     }
// }


// class Main{
//     public static void main(String args[]){
//         MyCounter counter1 = new MyCounter(1);
//         MyCounter counter2 = new MyCounter(2);
//         long startTime = System.currentTimeMillis();
//         counter1.run();
//         counter2.run();
//         long endTime = System.currentTimeMillis();
//         System.out.println("Total time required for processing: "+(endTime-startTime));
        
//     }
// }


class MyCounter implements Runnable{
    private int threadNo;
    
    public MyCounter(int threadNo){
        this.threadNo = threadNo;
    }
    
    @Override
    
    public void run(){
        for(int i = 0 ;i < 10; i++){
            try{
                Thread.sleep(500);
            }catch(Exception e){
                e.printStackTrace();
            }
             System.out.println("Thread No: "+threadNo+" and iteration no: "+i);
        }
        
       
    }
}

// class Main{
//     public static void main(String args[]){
//         // Thread thread1 = new Thread(new MyCounter(1));
//         // Thread thread2 = new Thread(new MyCounter(2));
//         // thread1.start();
//         // thread2.start();
        
//         // Thread thread = new Thread(new Runnable(){
//         //     public void run(){
//         //      for(int i = 0 ;i < 10; i++){
//         //     try{
//         //         Thread.sleep(500);
//         //     }catch(Exception e){
//         //         e.printStackTrace();
//         //     }
//         //      System.out.println(" and iteration no: "+i);
//         //      }
//         // }
//         // });
        
//         // thread.start();
        
//         new Thread(new Runnable(){
//             @Override
//             public void run(){
//                 for(int i = 0; i < 10 ; i++){
//                     try{
//                         Thread.sleep(500);
//                     }catch(Exception e){
//                         e.printStackTrace();
//                     }
//                     System.out.println(i*2);
//                 }
//             }
//         }).start();
//     }
// }





// class Main{
//     public static int counter = 0;
    
//     public static void main(String args[]){
//         new Thread(new Runnable(){
//             @Override
//             public void run(){
//                 for(int i = 1; i < 10000; i++){
//                     Main.counter+=1;
//                 }
//             }
//         }).start();
        
//         System.out.print(counter);
//     }
// }

// class Brackets{
//     public void generate(){
//         for(int i = 1; i <= 20; i++){
//             if(i <= 10){
//                 System.out.print("[");
//             }else{
//                 System.out.print("]");
//             }
//         }
       
//     }
    
    
// }
// class Main{
//     public static void main(String args[]){
//         Brackets brackets = new Brackets();
        
//         new Thread(new Runnable(){
//             @Override
//             public void run(){
//                 for(int i=0;i < 5; i++){
//                     brackets.generate();
//                     System.out.println();
//                 }
//             }
//         }).start();
//     }
// }

//Lambda expressions

interface Lambda{
    public void demo();
}


class Data{
    String name;
    
    public Data(String name){
        this.name = name;
    }
    
    public String getName(){
        return name;
    }
    
    public String toString(){
        return " Name : "+this.name;
    }
}
public class Main{
    public static void main(String args[]){
        // new Lambda(){
        //     @Override
        //     public void demo(){
        //         System.out.println("demo piece");
        //     }
        // }.demo();
        
        // Lambda lambda = () -> System.out.println("statement 1");
        
        // lambda.demo();
        
        // Thread thread = new Thread(() -> System.out.println("my state"));
        // thread.start();
        
        List<Data> list = new ArrayList();
        
        
        list.add(new Data("Ed"));
        list.add(new Data("Gia"));
        list.add(new Data("chand"));
        
        for(Data temp : list){
            System.out.println(temp);
        }
        
        Collections.sort(list,new Comparator<Data>(){
            public int compare(Data o1,Data o2){
                return o1.getName().compareTo(o2.getName());
            }
        });
        
        System.out.println();
        
        for(Data temp: list){
            System.out.println(temp);
        }
    }
}

--Threading and Lambda expressions

import Mine.*;

class First{

    public static int balance = 0;

    public static int counter = 0;
    synchronized public void withdraw(int amount) throws Exception{
        if(balance <= 0){
            System.out.println("Waiting for amount to be update $"+amount);
            wait(5000);
        }
        balance = balance-amount;
        System.out.println("The current balance is: "+balance);
    }

    public void deposit(int amount){
        synchronized(this){
        System.out.println("We are depositing the amount in the bank $"+amount);
        balance = balance +amount;
        notify();
        }
    }
    public static void main(String args[]) throws Exception{
        // new Thread(new Runnable(){
        //     public void run(){
        //         for(int i = 1 ; i <= 5; i++){
        //         new Bracket().generate();
        //         System.out.println();
        //         }
        //     }
        // }).start();

        // new Thread(new Runnable(){
        //     public void run(){
        //         for(int i = 1 ; i <= 5; i++){
        //         new Bracket().generate();
        //         System.out.println();
        //         }
        //     }
        // }).start();

        // First main = new First();

        // Thread thread1 = new Thread(new Runnable(){
        //     @Override
        //     public void run(){
        //         try{
        //         main.withdraw(100);
        //         }catch(Exception e){
        //             System.out.print(e.getMessage());
        //         }
        //     }
        // });
        // thread1.setName("thread1");
        // thread1.start();
        // Thread thread2 = new Thread(new Runnable(){
        //     @Override
        //     public void run(){
        //             try{
        //                 Thread.sleep(2000);
        //             main.deposit(200);
        //             }catch(Exception e){
        //                 System.out.println(e.getMessage());
        //             }
                
        //     }
        // });
        // thread2.setName("thread2");
        // thread2.start();

        Thread thread1 = new Thread(new Runnable(){
            @Override
            public void run(){
                for(int i = 0; i < 1000; i++){
                    counter++;
                }
            }
        });

        thread1.start();
        // Thread.sleep(1000);
        thread1.join();
        System.out.println("counter1: "+counter);

    }
}

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Scanner;

import Mine.*;

class First{

    public static int balance = 0;

    public static int counter = 0;
    synchronized public void withdraw(int amount) throws Exception{
        if(balance <= 0){
            System.out.println("Waiting for amount to be update $"+amount);
            wait(5000);
        }
        balance = balance-amount;
        System.out.println("The current balance is: "+balance);
    }

    public void deposit(int amount){
        synchronized(this){
        System.out.println("We are depositing the amount in the bank $"+amount);
        balance = balance +amount;
        notify();
        }
    }
    public static void main(String args[]) throws Exception{
        // new Thread(new Runnable(){
        //     public void run(){
        //         for(int i = 1 ; i <= 5; i++){
        //         new Bracket().generate();
        //         System.out.println();
        //         }
        //     }
        // }).start();

        // new Thread(new Runnable(){
        //     public void run(){
        //         for(int i = 1 ; i <= 5; i++){
        //         new Bracket().generate();
        //         System.out.println();
        //         }
        //     }
        // }).start();

        // First main = new First();

        // Thread thread1 = new Thread(new Runnable(){
        //     @Override
        //     public void run(){
        //         try{
        //         main.withdraw(100);
        //         }catch(Exception e){
        //             System.out.print(e.getMessage());
        //         }
        //     }
        // });
        // thread1.setName("thread1");
        // thread1.start();
        // Thread thread2 = new Thread(new Runnable(){
        //     @Override
        //     public void run(){
        //             try{
        //                 Thread.sleep(2000);
        //             main.deposit(200);
        //             }catch(Exception e){
        //                 System.out.println(e.getMessage());
        //             }
                
        //     }
        // });
        // thread2.setName("thread2");
        // thread2.start();

        // Thread thread1 = new Thread(new Runnable(){
        //     @Override
        //     public void run(){
        //         for(int i = 0; i < 1000; i++){
        //             counter++;
        //         }
        //     }
        // });

        // thread1.start();
        // // Thread.sleep(1000);
        // thread1.join();
        // System.out.println("counter1: "+counter);
        

        // File file = new File("./Mine/myFile.txt");
        // file.createNewFile();

        // System.out.println("File created");

        // String os = System.getProperty(("os.name"));
        // System.out.print(os);

        // try(BufferedWriter bw = new BufferedWriter(new FileWriter("myFile.txt",true))){
        //         bw.write("shankaran");
        // }catch(Exception e){
        //         e.printStackTrace();
        // }
        // File file = new File("myFile.txt");
        // try(BufferedReader br = new BufferedReader(new FileReader(file))){
        //     String line;
        //     while((line = br.readLine())!=null){
        //         System.out.println(line);
        //     }

        // }catch(Exception e){
        //     System.out.print(e.getMessage());
        // }

       
        
        try( Scanner sc = new Scanner(new File("MyFile.txt"))){

            String line;
            while(sc.hasNext()){
                line = sc.nextLine();
                System.out.println(line);
            }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
        /*
         * if(file.delete()){
         * System.out.println("File deleted");
         * else{
         * System.out.println("file not deleted")
         * }}
         * 
         */
    }
}






