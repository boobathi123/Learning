/*
    Learning about how the way that the running flow of each method should executed inside the stack memory segment
*/

Example program for method returnning;

Finding nth fibonnoci number:

public class First{
    public int finder(int n){
    if(n <= 0 ) return n;

    return finder(n-1)+finder(n-2);
}    
    public static void main(String args[]){
    }
}

//  Learning about dp approaches :

House robber

class Main{
    public int finder(int a[],int size){
if(size == 0 ) return a[size];
if(size < 0 ) return 0;

int getting = a[size]+finder(a,size-2);
int notGetting = 0+finder(a,size-1);

return Math.max(getting,notGetting);
}
    public static void main(String args[]){
    int house[]= {1,2,3,4,5};
    finder(a,house.length-1);
}
}


//Getting into the OOPS concepts
    
class Car{
    private String doors;
    private String driver;
    private String engine;
    private int speed;

    public String getDoors() {
        return doors;
    }

    public void setDoors(String doors) {
        this.doors = doors;
    }

    public String getDriver() {
        return driver;
    }

    public void setDriver(String driver) {
        this.driver = driver;
    }

    public String getEngine() {
        return engine;
    }

    public void setEngine(String engine) {
        this.engine = engine;
    }

    public int getSpeed() {
        return speed;
    }

    public void setSpeed(int speed) {
        this.speed = speed;
    }



}

class Main{
    public static void main(String args[]){
        Car car = new Car();
        car.setDoors("closed");
        car.setDriver("seated");
        car.setEngine("off");
        car.setSpeed(10);

        System.out.println(car.getSpeed());
        System.out.println(car.getDriver());
    }
}

//using constructor
class SmartPhone{
    private String brand ;
    public SmartPhone(){
        brand = "apple";
    }

    public String getBrand(){
        return brand;
    }
}

class Main{
    public static void main(String args[]){
        SmartPhone phone = new SmartPhone();
        System.out.print(phone.getBrand());
    }
}


//car based example of inheritance

class Vehicle{
    private String engine;
    private int wheels;
    private int seats;
    private int fuelTank;
    private  String lights;

    public Vehicle(){
        engine = "petrol";
        wheels = 2;
        seats = 2;
        fuelTank = 14;
        lights = "LED";

    }

    public Vehicle(String engine, int wheels, int seats, int fuelTank, String lights) {
        this.engine = engine;
        this.wheels = wheels;
        this.seats = seats;
        this.fuelTank = fuelTank;
        this.lights = lights;
    }

    public String getEngine() {
        return engine;
    }

    public void setEngine(String engine) {
        this.engine = engine;
    }

    public int getWheels() {
        return wheels;
    }

    public void setWheels(int wheels) {
        this.wheels = wheels;
    }

    public int getSeats() {
        return seats;
    }

    public void setSeats(int seats) {
        this.seats = seats;
    }

    public int getFuelTank() {
        return fuelTank;
    }

    public void setFuelTank(int fuelTank) {
        this.fuelTank = fuelTank;
    }

    public String getLights() {
        return lights;
    }

    public void setLights(String lights) {
        this.lights = lights;
    }
}

class Truck{
    public String steering;
    public String musicSystem;
    public String airConditioner;
    public int container;
}

class Car{
    public String steering;
    public String musicSystem;
    public String airConditioner;
    public String fridge;
    public String entertainmentSystem;

}

class Bike extends Vehicle{
    public String handle;

    public Bike(){
        handle = "hi";
    }

    public Bike(String handle) {
        this.handle = handle;
    }

    public Bike(String engine, int wheels, int seats, int fuelTank, String lights, String handle) {
        super(engine, wheels, seats, fuelTank, lights);
        this.handle = handle;
    }
}

class Main{
    public static void main(String args[]){
        Bike bike = new Bike();
        bike.handle = "Short";


        System.out.println(bike.getWheels());
    }
}


class Animal{
    protected float heightInFeet;
    protected float weightInKilos;
    protected String animalType;
    protected String bloodType;

    public Animal(){
        this.heightInFeet = 0;
        this.weightInKilos = 0;
        this.animalType = "unknown";
        this.bloodType = "unknown";
    }

    public String showInfo(){
        return "Animal [heightInFeet = "+this.heightInFeet+" , weightInKilos="+weightInKilos+" , animalType = "+animalType+" , bloodType ="+bloodType+"]";
    }
}

class Reptile extends Animal{
    protected String skin,egg;
    protected boolean backbone;

    public Reptile(){
        heightInFeet= 5;
        weightInKilos = 20;
        animalType = "Reptile";
        bloodType = "Cold";
        this.skin = "Dry skin";
        this.backbone = true;
        this.egg = "soft shelled";
    }

    public String showInfo(){
        return "Reptile [skin= "+skin+" , egg="+egg+" , backbone= "+backbone+" ,heightInFeet = "+heightInFeet+" weightInkilos= "+weightInKilos+" , animalType= "+animalType+" ,bloodType= "+bloodType;
    }
}

class Crocodile extends Reptile{
    public Crocodile(){
        super();
        super.egg = "hard shelled";
    }

    public String showInfo(){
        return " Crocodile [ skin = "+skin+" , egg= "+egg+", backbone = "+backbone+" , heightInFeet ="+heightInFeet+" , weightInKilos= "+weightInKilos+" , animalType= "+animalType+" , bloodType= "+bloodType;
    }
}

class Fish extends Animal{
    protected boolean waterBone = true;
    protected boolean gills = true;

    public Fish(){
        animalType = "fish";
        this.waterBone=true;
        this.gills = true;

    }

    public String showInfo(){
        return "Fish [waterBone = "+waterBone+" , gills= "+gills;
    }
}
class Shop{
    Lock lock = new Lock();
    
    
    public void shopStatus(){
        if(lock.isLocking()){
            System.out.printf("shop is locked");
        }else{
            System.out.printf("Shop is open");
        }
    }
    
    
    class Lock{
        private boolean locking = true;
        
        public boolean isLocking() {
            return locking;
        }
        
        public void setLocking(boolean locking){
            this.locking = locking;
        }
    }
}


class Main{
    public static void main(String args[]){
        Shop shop = new Shop();
        shop.shopStatus();
    }
}

