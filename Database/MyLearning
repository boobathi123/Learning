// leaning about how the way that the foreign key works and how to use it in the postgresql

create table movies(
	movie_id serial primary key,
	movie_name varchar(50) not null,
	movie_length int,
	movie_language varchar(20),
	age_certificate varchar(10),
	release_date date,
	director_id serial references directors(director_id)
	
);
drop table if exists movies_revenues;
create table movies_revenues(
	revenue_id serial primary key,
	movie_id int references movies(movie_id),
	revenue_domestic numeric(10,2),
	revenue_international numeric(10,2)
);

--creating movies_actors 

create table movies_actos(
	 movie_id int references movies(movie_id),
	 actor_id int references actors(actor_id),
	 primary key(movie_id,actor_id)
);

-- ---------------------------------------------------
--  Records of 'movies' database > table : directors
-- ---------------------------------------------------
INSERT INTO directors (first_name,last_name,date_of_birth,nationality) VALUES
('Tomas','Alfredson','1965-04-01','Swedish'),
('Paul','Anderson','1970-06-26','American'),
('Wes','Anderson','1969-05-01','American'),
('Richard','Ayoade','1977-06-12','British'),
('Luc','Besson','1959-03-18','French'),
('James','Cameron','1954-08-16','American'),
('Guillermo','del Toro','1964-10-09','Mexican'),
('Victor','Fleming','1889-02-23','American'),
('Francis','Ford Coppola','1939-04-07','American'),
('Kinji','Fukasaku','1930-07-03','Japanese'),
('Florian ','Henckel von Donnersmarck','1973-05-02','German'),
('Terry','Jones','1942-02-01','British'),
('Stanley','Kubrick','1928-07-26','American'),
('John','Lasseter','1957-01-12','American'),
('Ang','Lee','1954-10-23','Chinese'),
('Bruce','Lee','1940-11-27','Chinese'),
('George','Lucas','1944-05-14','American'),
('Martin','McDonagh','1970-03-26','British'),
('James','McTeigue','1967-12-29','Australian'),
('Fernando','Meirelles','1955-11-09','Brazilian'),
('Hayao ','Miyazaki','1941-01-05','Japanese'),
('Paulo','Morelli','1966-03-10','Brazilian'),
('Chan-wook','Park','1963-08-23','South Korean'),
('Sam','Raimi','1959-10-23','American'),
('Mark','Romanek','1959-09-18','American'),
('Martin','Scorsese','1942-11-17','American'),
('Ridley','Scott','1937-11-30','British'),
('Tony','Scott','1944-06-21','British'),
('Zack','Snyder','1966-03-01','American'),
('Sion','Sono','1961-12-18','Japanese'),
('Steven','Spielberg','1946-12-18','American'),
('Robert','Stevenson','1905-03-31','British'),
('Quentin','Tarantino','1963-03-27','American'),
('Robert','Wise','1914-09-10','American'),
('Kar Wai','Wong','1958-07-17','Chinese'),
('Robert','Zemeckis','1952-05-14','American'),
('Yimou','Zhang','1950-04-02','Chinese');



create table customers(
	customer_id serial primary key,
	first_name varchar(50),
	last_name varchar(50),
	email varchar(50),
	age int
);

insert into customers(first_name,last_name,email,age) values(
'adnan','waheed','a@b.com',40
);

insert into customers(first_name,last_name) values('adnad','wahad'),('john','adams'),('Linda','abe');
select * from customers;


insert into customers(first_name) values('adam');


--after the insert, lets returns all rows

insert into customers(first_name) values('JOSEPH') returning customer_id;


--update data in the table
update customers set email = 'a2@gmail.com' where customer_id = 7;

--update multiple columns
update customers set email = 'a4@gmail.com', age = 30 where customer_id = 1;


--use returning to get updated rows

update customers set email = 'a@b.com' where customer_id = 2 returning *;


--update all records in a table

select * from customers;

update customers set is_enable = 'y';

--deleting records from a table

delete from customers where customer_id = 9;

select * from customers;

--using  upsert

/*
	The main idea is that when you insert a new row into the table, Postgresql will update the row if it already exist
	otherwise, it will insert the new row

	that is why we call the action is upsert ( the combination of update or insert )
*/

create table t_tags(
	id serial primary key,
	tag text unique,
	update_date timestamp default now()
);

insert into t_tags(tag) values('pen'),('pencil');
select * from t_tags;

--2025-02-06 00:06:39.604972
--Lets insert a record, on conflict do nothing

insert into t_tags (tag) values('pen') on conflict (tag) do nothing ;

 -- lets insert a record on conflict set new values

 insert into t_tags (tag) values ('pen1') on conflict(tag) do update set tag=excluded.tag,update_date=now();

 select * from t_tags;

 --Quering data
 --selecting all the data from table
 select * from movies;

 --concatenating two data

 select first_name || last_name from actors;

 select first_name || " " || last_name from actors;

 --making alias

 select first_name || " "|| last_name as "full Name" from actors;

 --geting the output without using table column

 select 2*10;

 --using orderby to sort records (asc & desc)

 select * from movies order by asc ;

 --sorting all movies names according to its release date

 select * from movies order by release_date desc;

 --sorting based on multiple columns

 select * from actors order by release_date desc, movie_name asc ;

 --length() returns the length of the particulare value

 select first_name, length(first_name) as len from actors order by len desc;

 --where with and and or 

 select * from movies where movie_lang = 'japanese';

 select * from movies where movie_lang = 'English' and age_certificate = 18;

//using limit and offset ( getting the top 5 rated movies according to movie_domestic)

select * from movies order by movies_domestic desc limit 5 offset 4;


-- create
CREATE TABLE EMPLOYEE (
  empId INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  dept TEXT NOT NULL
);

-- insert
INSERT INTO EMPLOYEE VALUES (0001, 'Clark', 'Sales');
INSERT INTO EMPLOYEE VALUES (0002, 'Dave', 'Accounting');
INSERT INTO EMPLOYEE VALUES (0003, 'Ava', 'Sales');

-- fetch
SELECT * FROM EMPLOYEE fetch last row only;


select * from movies order by movie_length desc fetch first 5 row only;

-- Getting the  first 5 movie sfrom the 5 th record onward long movie movie_length
select * from movies order by movie_length desc fetch first 5 row only offset 4;

--in and not IN

--that two operators are used to check if a value matches or not matches in a list

select * from movies where movie_lang in ("English","Chinese","Japanse") order by movie_lang;


--to Retrieve the data within the range

select * from actors where dataofbirth between '1991-01-01' and '1995-12-31';

--finding release date 

select * from movies from release_date between '1998-01-01' and '1992-12-31' order by movie_date desc;


--is Null using missing value of data coming to other is not null used to check non completenes of the data

select * from actors where data_of_birth is null order by date_of_birth;


select * from actors where date_of_birth is null or first_name is null;

--concatenation operator

select 'hello' || 'world' as firstName ;


--Like and ILike used for pattern matching

--special characters ( %  , _)

--to concat two columns

select concat(firstName,lastName) as "ActorName" from actors;


select 'hello' like 'hello';

select 'hello' like 'h%';

select 'hello' like 'hell%';


--DataTypes
create table table_boolean(product_id serial primary key,is_available boolean not null);

insert into table_boolean(is_available) value(true);



--domain creation

--create domain addr varchar(100) not null;

-- create table locations(
--   address addr
-- );

--insert into locations values('shankar'),('apple');

-- select * from locations;

-- create domain positive_numeric int not null check (value > 0);

-- create table sample(
--   sample_id serial primary key,
--   value_num positive_numeric
-- );

-- insert into sample(value_num) values(1),(2);

-- select * from sample;


create domain us_postal_code as Text check (value ~'^d{5}-]')


drop domain positive_numeric;

--creating composite datatype

create type address as (city varchar(50),country varchar(20));


--primary key

create table table_items(
  item_id integer primary key,
  item_name varchar(100) not null


--dropping a constraint

alter table tablename drop constraint cname;

alter table table_items add constraint primary key(item_id);


--primary key constraint on multiple columns = Composite primary key

create table t_grades(
  course_id varchar(50) not null,
  student_id varchar(50) not null,
  grade int not null,
  
  primary key(course_id,student_id)
);


--foreign key constraint

create table table_name(

  foreign key() references table_name(column_name)
);


create table t_products(
  product_id int primary key,
  product_name varchar(100) not null,
  supplier_id int not null,
  foreign key(supplier_id) references t_suppliers (supplier_id)
);


create table t_suppliers(
  supplier_id int primary key,
  supplier_name varchar(100) not null
);

--updatation

update t_products set suplier_id = 1 where product_id = 1;


--dropping

alter table tablename drop constraint cname;

alter table t_products drop constraint t_products_supplier_id_fkey;

--adding foreign key 

alter table tablename add constraint cname foreign key (columnname) references table2_name(columnname);


alter table prices add constraint price_check check(price > 0 and discount >= 0 and price >  discount);

 


alter table prices rename constraint price_check to price_discount_check;

alter table prices drop constraint price_discount_check;


--Sequences


create sequence if not exists test_seq;

select nextval('test_seq'); // return the value(1..2)

select currval('test_seq');

--set sequence
select setval('test_seq',100);

select setval('test_seq',200,false);

create sequence if not exists test_seq2 start with 200;


create sequence if not exists test_seq3 increment 50 minvalue 400 maxvalue 6000 start with 500;

--specifying the data type of a sequence

create sequence if not exists test_seq_smallint as int

--creating decending sequence
create sequence seq_asc

select nextval('seq_asc')

create sequence seq_des increment -1 minvalue 1 maxvalue 3 start 3 cycle;


--for --dropping

drop sequence seq_name;


--to altering already existing sequence (serial)

alter sequence users_user_id_seq restart with 100;



create sequence users start with 100 owned by users.user_id;

alter table users alter column user_id set default nextval('users')

--Listing all sequence
select relname sequence_name from pg_class where relkind='S';



create sequence table_seq not null start with 1;

create table contacts{
  contact_id text not null default('ID' || nextval('table_seq')),
  contact_name varchar(50)
}

alter sequence table_seq owned by contacts.contact_id;


--String functions
select upper('shankar');

--initcap

select initcap('shankar is a boy');


select initcap(concat(first_name,'',last_name)) as fullname from directors order by first_name;

select left('shankar',1); --s

--we can also give the negative number to get the last indices


select left('abc',-2);



--reverse

reverse(string);

select reverse('Amazing postgreSQL');

--split_part

select split_part('1,2,3',',',2);

--to convert data from another type ::

ltrim(string,[character]);
rtrim(string,[character]);
btrim(string,[character]);

select trim(
  leading from '  Amazing postgres'
),trim(trailing from 'Amazing postgres  '),
trim('  Amazing postgresql');


---removing leading zeros from a number

select trim(leading '0' from cast (000123456 as text));

--lpad and rpad

select lpad('Database',12,'*');
select Rpad('Database',15,'*');


--substring method

select substring ('what a wonderful world' from 1 to 4);

--replacing 

select replace('abc xyz','z','l');

--group by

select count(movie_lang) from movies group by movie_lang;

select age_certificate,sum(movie_length) from movies group by age_certificate;



--having

select direct_id,sum(movie_length) from movies group by direct_id having sum(movie_length) >  200 order by 2 desc;

--order of execution

from

where 

group by


having 

select 

distinct

limit

--handling the null database

select coalesce (department,' no department') as department,
count (salary) as total_employees from employee_test group by department order by deparment;


--joins




select * from directors d left join movies mv on d.director_id = mv.directors_id where d.nationality in ('American','chinese');

--Get all the total revenues done by each films for each directors_id
select d.first_name,d.last_name, sum(r.revenue_domestic+r.revenue_international) as "total_revenues" directors left join movies mv on mv.director_id = d.director_id left join movies_revenues r on r.movie_id = mv.movie_id group by d.first_name,d.last_name;
order by 3 desc;

--The union operator combines result set from two or more select statements into a single result set

--To be able to use union;
    - The order and number of the columns in the select list of all queries must be the same
    - The data types must be compatibel too.
    
    
select * from left_product union select * from right_product;

--union all also allows the duplicate records as well


select first_name,  
        last_name,
        date_of_birth,
        'directors' as "tablename"
from directors
where 
date_of_birth >'1970-12-31'
union
select first_name,
        last_name,
        date_of_birth,
        'actors' as "tablename"
from actors where date_of_birth > '1970-12-31' order by first_name;














































































